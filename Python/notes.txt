
# Errors:
- IndexError : when you want to acces an index that does not exist, list in a list of 2 element you ask for list[5].
- KeyErros : when you call a key of something that does noy exist, like a dict home[...age...name...sex] and you call it with home['hight'].
- NameError : when you call a var that is not defined, like calling print(hello), where hello is not even defined.
- AttributeError:  when you call a method of an Object that does not exist, for example you have 2 lists and you use the function list1.intersection(list2). You can use the intersectin function for sets but not lists.
- NotImplementedError : its not available as default and it needs to be called, and to use it you just do : raise NotImplementedError ('text'). You could use it inside function that do nothing for the moment
- RunTimeError : a not so used error, not clear when it appears and why. It will apear randomly when the program runs.
- SyntaxError: when pythin does not understand what you wrote. You do not fallow the rules on python syntax.
- IndentationError: when you do not use properly indentation (4 spaces in the begining of a line)
- TabError : when you indent in different ways like you use 4 spaces and also tab to indent. Python expects that you indent in the same way inside a file.
- TypeError : when you do something that you should not do, for example add a str to a int : "hi" + 5
- ValueError : when you call a built in function, or normal function with the correct variable but its value is not the corect one. Like : "int("20.5")". This will give an error ad its better to convert to floar a string that contain a number with decimals.
- ImportError : Its called also a circular import. When you have 1 scripts that calls anoter script with an import, and the other one calls also the first script with an import. It creates a loop that will call script1->script2->script1 ....
- DeprecationError : its not available as default and it needs to be called. You can call it when you want to say that a specific code could still be used but its deprcated, as there is a new code that could replace it. You call it with : raise DepricatedError ('text')

# Namings
Object:  will inherit a class and all its content
Method: is a function is a class.
Property: a variable in a class
Argument : is a variable used when we call a method in a class. The first argument is always the self one.
Parameter: is the variables that are accepted by a method, exemple def alex (name):
__init__ : is called a contructor
Traceback : its the way we see error details. It shows first the line where the error happens and then geoes up in function until the main call was done that trigerred that error.
Constructor : is the method from a class that will be executed when an object is defined
List comprehencion : x =0, y = [x+1 for x in range[0,9]]. Y will be a list : [0, 1, 2, ..., 9]
Module : is the file executed when calling it by import
Package : folder that contains libraries

# Tricks:
- "class.__name__" will give you the class name.
- "pass" is used to just skip a block when you don't know what logic to put inside tat block.
- we can use multiline string to have strings on multiple lines:
"""this is the first line
and this is the second
third etc..."""
- when you import, you run the full content of that module and you have the met available
- Do not change a list content while you iterate on it. Its a bad practice. Use list comprehension with condition to create another list.

#Rules:
- staticmethods should not be used. If used you needt o be sure that that object will not be inherited
- classmethod will be used when you do not want to use the self from the inherited class, and you prefer using you own internal self
- you call a method from another method in the same class, by using self.method_to be called
- Opening a file with r instead of a or w, will give a no file found error, if the file does not exists already. With a and W you create the file if it does not exist already.

#Variables:
- List : [1, 'rr', 6]
- Tuples : ("John", "Rich", "Smith"). Random values always. To add : tuples = tuples + ("Stuard")
- Sets : {"John", "Rich", "Bob"}. Multiple comparison functions. To ass : Sets.add("Toto")
- Dict : ({ "name" : "John", "age" : 34}, {....}).
- SQLITE supports : text, integer, real, null and blob (images etc. )
