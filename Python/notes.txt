
# Errors:
- IndexError : when you want to acces an index that does not exist, list in a list of 2 element you ask for list[5].
- KeyErros : when you call a key of something that does noy exist, like a dict home[...age...name...sex] and you call it with home['hight'].
- NameError : when you call a var that is not defined, like calling print(hello), where hello is not even defined.
- AttributeError:  when you call a method of an Object that does not exist, for example you have 2 lists and you use the function list1.intersection(list2). You can use the intersectin function for sets but not lists.
- NotImplementedError : its not available as default and it needs to be called, and to use it you just do : raise NotImplementedError ('text'). You could use it inside function that do nothing for the moment
- RunTimeError : a not so used error, not clear when it appears and why. It will apear randomly when the program runs.
- SyntaxError: when pythin does not understand what you wrote. You do not fallow the rules on python syntax.
- IndentationError: when you do not use properly indentation (4 spaces in the begining of a line)
- TabError : when you indent in different ways like you use 4 spaces and also tab to indent. Python expects that you indent in the same way inside a file.
- TypeError : when you do something that you should not do, for example add a str to a int : "hi" + 5
- ValueError : when you call a built in function, or normal function with the correct variable but its value is not the corect one. Like : "int("20.5")". This will give an error ad its better to convert to floar a string that contain a number with decimals.
- ImportError : Its called also a circular import. When you have 1 scripts that calls anoter script with an import, and the other one calls also the first script with an import. It creates a loop that will call script1->script2->script1 ....
- DeprecationError : its not available as default and it needs to be called. You can call it when you want to say that a specific code could still be used but its deprcated, as there is a new code that could replace it. You call it with : raise DepricatedError ('text')

# Namings
Object:  will inherit a class and all its content
Method: is a function is a class.
Property: a variable in a class
Argument : is a variable used when we call a method in a class. The first argument is always the self one.
Parameter: is the variables that are accepted by a method, exemple def alex (name):
__init__ : is called a contructor
Traceback : its the way we see error details. It shows first the line where the error happens and then geoes up in function until the main call was done that trigerred that error.
Constructor : is the method from a class that will be executed when an object is defined
List comprehencion : x =0, y = [x+1 for x in range[0,9]]. Y will be a list : [0, 1, 2, ..., 9]
Module : is the file executed when calling it by import
Package : folder that contains libraries
Cores : procesor cores
Threads : a list of waiting element ready to be sent to be processed by the cores
Process : its the thing that will execute 1 or more threads element in 1 or more cores, and also that makes sures the threads have all the necessary resources.
Time slicing : when you stop a thread from a core, and you replace it with another thread, the first one will stop, and its status will be stored, until it will be placed again in a thread so it can continue

# Tricks:
- "class.__name__" will give you the class name.
- "pass" is used to just skip a block when you don't know what logic to put inside tat block.
- we can use multiline string to have strings on multiple lines:
"""this is the first line
and this is the second
third etc..."""
- when you import, you run the full content of that module and you have the met available
- Do not change a list content while you iterate on it. Its a bad practice. Use list comprehension with condition to create another list.
- 1 is seen as True and 0 as False.
- Use list comprehension or gnerator comprehension rather than filter or map function. Those function should be used when you have colleges that use another language, as generator comprehension is more specific to python. # [f.lower() for f in friends]
- A good advice is to use the parameter names of a function when you call it with arguments . Example 605
- Unpacking is a beter way to give arguments. For list of tuples [{a, 4}, {b, 9}] you give this as an argument with (*val) and for dict you use (**var). Example 605
- Cache-ing a function is good when you call severla times a function that will give the same answer for up to 1 hour. Example: 10_Rest/102_Chache_ing_a_function

#Rules:
- everythig in python is a Object. Like + or sum() etc...
- staticmethods should not be used. If used you needt o be sure that that object will not be inherited
- classmethod will be used when you do not want to use the self from the inherited class, and you prefer using you own internal self
- you call a method from another method in the same class, by using self.method_to be called
- Opening a file with r instead of a or w, will give a no file found error, if the file does not exists already. With a and W you create the file if it does not exist already.
- All function return None by default
- break will stop the most inner loop, and continue, will ignore all that is after it, and continue with the next iteration of the loop
- generators can be build with yield as a return or a class with __next__ for iterators and + __itr__ to be also iterable so you can do sum(), len(), for x in Iterator ...
- All generators are iterators but not all iterators are generator, as you can have something tha twill iterate but will not generate numbers. For example you iterate thru a list of names.
- An iterator is not iterable unless it has the __itr__ dunder method so it can iterate
- Use only non mutable default parameters values, as the mutable ones will just add on top of the initial content of that mutable value. More in # 604_Mutable_default_parameters_error
- The default parameters of a functions are assigned when a function is defined not when its called. Another advantage is that the order of the arguments is not important when you give names to the arguments also.
- When you debug you can have set the logging to DEBUG mode, but when users are using it you should raise the limit to Warning, Error and Critical.
- Project file imports are done after the import from outside the project sources
- Selenium is better than webparsing, as if the page contains javaScrip, this will not be found into the html as it will change constantly.
- Python is not asynchronous. There is always something happening after another thing.
- If you want that to force the fact that a variable that you use in your function is the global one of the file, you put global in front of that variable inside the function. (global var1, where var1 is the global one). But be carefull as the global var can now be updated inside the function.

#Variables:
- List : [1, 'rr', 6]. To add : list.append or list + []
- Tuples : ("John", "Rich", "Smith"). Random values always. To add : tuples = tuples + ("Stuard"). To access : tuple[0], tuple[2]
- Sets : {"John", "Rich", "Bob"}. Multiple comparison functions. To add : Sets.add("Toto")
- Dict : ({ "name" : "John", "age" : 34}, {....}). To add : dict['new element'] = value. To access : dict['name'] ... to get the value John. This is called a key : 'name'. ot dict.get('name')
- SQLITE supports : text, integer, real, null and blob (images etc. )

#Examples:

@ Lambda :
x = lambda a, b : a * b
print(x(5, 6))

@ Generator comprehension:
friends = ['Rolf', 'Anna', 'Roul', 'John', 'Robin']
(f.lower() for f in friends) # this is not a list comprehension but a generator comprehension as its using ( andn not [
# so you can do next() to get : "rolf"_

@ Stuff that are equal to False:
0 , 0,0
None
False
[], (), {}
# to find out what is the boolean equivalent just do print (bool(variable))

@ Positional/keyword arguments and argument unpacking
#Positional:
x = (1,2,3)
def sum_all(a,b,c):
    return a+b+c
sum_all(1,2,3)
#OR:
sum_all(*x)

# OR def sum_all(*args): # args will take any number of positional arguments

#Keyword:
x = {'a': 1, 'b': 3, 'c': 6}
def sum_all(a,b,c):
    return a+b+c
print(sum_all(b = 2, c = 1, a = 4))
#OR:
print(sum_all(**x))

# # OR def sum_all(*kwargs): # args will take any number of keyword name arguments